// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getComponentsWithClasses(path) {
  var components = Fs.readdirSync(path);
  var muiNames = [];
  var classKeys = Belt_Array.keepMap(components, (function (filename) {
            if (!filename.endsWith(".res")) {
              return ;
            }
            var fileContent = Fs.readFileSync(Path.join(path, filename), {
                  encoding: "utf8"
                });
            var fileByLines = fileContent.split("\n");
            var classesBegin = Belt_Array.getIndexBy(fileByLines, (function (line) {
                    return line.startsWith("type classes = {");
                  }));
            if (classesBegin === undefined) {
              return ;
            }
            var beginSlice = Belt_Array.sliceToEnd(fileByLines, classesBegin);
            var classesEnd = Belt_Array.getIndexBy(beginSlice, (function (line) {
                    return line.startsWith("}");
                  }));
            if (classesEnd === undefined) {
              return ;
            }
            var classes = Belt_Array.keepMap(Belt_Array.map(Belt_Array.slice(beginSlice, 1, classesEnd - 1 | 0), (function (prim) {
                        return prim.trim();
                      })), (function (line) {
                    if (line.startsWith("//") || line.startsWith("/*") || line.startsWith("*") || line.startsWith("...")) {
                      return ;
                    }
                    var newLine = line.startsWith("color") ? line : line.replace(new RegExp("string"), "ReactDOM.Style.t");
                    return "  " + newLine;
                  }));
            var typeName = filename.substring(0, filename.length - 4 | 0);
            var typeNameLowercaseFirst = typeName.charAt(0).toLowerCase() + typeName.slice(1) + "ClassKey";
            var propsTypeLine = Belt_Array.getBy(fileByLines, (function (line) {
                    return Caml_option.null_to_opt(line.match(new RegExp("^type props<.*> = {"))) !== undefined;
                  }));
            var muiName;
            if (propsTypeLine !== undefined) {
              var typeParamsMatchOpt = propsTypeLine.match(new RegExp("^type props<([^>]*)> = {"));
              if (typeParamsMatchOpt !== null) {
                if (typeParamsMatchOpt.length !== 2) {
                  muiName = "  @as(\"Mui" + typeName + "\") mui" + typeName + "?: component<" + typeNameLowercaseFirst + ", " + typeName + ".props>,";
                } else {
                  var params = typeParamsMatchOpt[1];
                  var paramCount = params.length === 0 ? 0 : params.split(",").length;
                  var unknowns = paramCount > 0 ? Belt_Array.make(paramCount, "unknown").join(", ") : "";
                  muiName = paramCount > 0 ? "  @as(\"Mui" + typeName + "\") mui" + typeName + "?: component<" + typeNameLowercaseFirst + ", " + typeName + ".props<" + unknowns + ">>," : "  @as(\"Mui" + typeName + "\") mui" + typeName + "?: component<" + typeNameLowercaseFirst + ", " + typeName + ".props>,";
                }
              } else {
                muiName = "  @as(\"Mui" + typeName + "\") mui" + typeName + "?: component<" + typeNameLowercaseFirst + ", " + typeName + ".props>,";
              }
            } else {
              muiName = "  @as(\"Mui" + typeName + "\") mui" + typeName + "?: component<" + typeNameLowercaseFirst + ", " + typeName + ".props>,";
            }
            var classesBody = " = {\n" + classes.join("\n") + "\n}\n";
            muiNames.push(muiName);
            return "type " + typeNameLowercaseFirst + classesBody;
          })).join("\n");
  return "// This file is generated automatically by helpers/src/GenerateOverrides.res. Do not edit manually!\n\ntype component<'classKey, 'props> = {\n  defaultProps?: 'props,\n  styleOverrides?: 'classKey,\n}\n\n" + classKeys + "\ntype t = {\n" + muiNames.join("\n") + "\n}\n";
}

var muiOverrides = getComponentsWithClasses("./packages/rescript-mui-material/src/components");

var labOverrides = getComponentsWithClasses("./packages/rescript-mui-lab/src");

Fs.writeFileSync("./packages/rescript-mui-material/src/types/Overrides.res", muiOverrides, {
      encoding: "utf8"
    });

Fs.writeFileSync("./packages/rescript-mui-lab/src/Overrides.res", labOverrides, {
      encoding: "utf8"
    });

export {
  getComponentsWithClasses ,
  muiOverrides ,
  labOverrides ,
}
/* muiOverrides Not a pure module */
